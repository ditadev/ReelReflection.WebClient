{"ast":null,"code":"import { environment as env } from '../../environment/environment';\nimport { HttpHeaders } from '@angular/common/http';\nimport { catchError, retry, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  searchMovieByTitle(title) {\n    const url = `${env.apis.apiUrl}/GetMovieByTitle/${title}`;\n    return this.http.get(url).pipe(retry(1), catchError(this.handleError));\n  }\n  getMovieById(id) {\n    const url = `${env.apis.apiUrl}/GetMovieById/${id}`;\n    return this.http.get(url).pipe(retry(1), catchError(this.handleError));\n  }\n  getSearchHistory() {\n    const url = `${env.apis.apiUrl}/SearchHistory`;\n    return this.http.get(url).pipe(retry(1), catchError(this.handleError));\n  }\n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    return throwError(() => {\n      console.log(errorMessage);\n      return errorMessage;\n    });\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,WAAW,IAAIC,GAAG,QAAQ,+BAA+B;AAClE,SAA+CC,WAAW,QAAqB,sBAAsB;AACrG,SAASC,UAAU,EAAcC,KAAK,EAAEC,UAAU,QAAQ,MAAM;;;AAMhE,OAAM,MAAOC,UAAU;EAMrBC,YAAoBC,IAAe;IAAf,SAAI,GAAJA,IAAI;IAJxB,gBAAW,GAAG;MACZC,OAAO,EAAE,IAAIP,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;KAChE;EAEsC;EAEhCQ,kBAAkB,CAACC,KAAY;IACpC,MAAMC,GAAG,GAAG,GAAGX,GAAG,CAACY,IAAI,CAACC,MAAM,oBAAoBH,KAAK,EAAE;IACzD,OAAO,IAAI,CAACH,IAAI,CAACO,GAAG,CAAQH,GAAG,CAAC,CAACI,IAAI,CAACZ,KAAK,CAAC,CAAC,CAAC,EAAED,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAAC;EAC/E;EAEOC,YAAY,CAACC,EAAS;IAC3B,MAAMP,GAAG,GAAG,GAAGX,GAAG,CAACY,IAAI,CAACC,MAAM,iBAAiBK,EAAE,EAAE;IACnD,OAAO,IAAI,CAACX,IAAI,CAACO,GAAG,CAAQH,GAAG,CAAC,CAACI,IAAI,CAACZ,KAAK,CAAC,CAAC,CAAC,EAAED,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAAC;EAC/E;EAEOG,gBAAgB;IACrB,MAAMR,GAAG,GAAG,GAAGX,GAAG,CAACY,IAAI,CAACC,MAAM,gBAAgB;IAC9C,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAAQH,GAAG,CAAC,CAACI,IAAI,CAACZ,KAAK,CAAC,CAAC,CAAC,EAAED,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAAC;EAC/E;EAEAA,WAAW,CAACI,KAAU;IACpB,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAD,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO;KACnC,MAAM;MACL;MACAF,YAAY,GAAG,eAAeD,KAAK,CAACI,MAAM,cAAcJ,KAAK,CAACG,OAAO,EAAE;;IAEzE,OAAOnB,UAAU,CAAC,MAAK;MACrBqB,OAAO,CAACC,GAAG,CAACL,YAAY,CAAC;MACzB,OAAOA,YAAY;IACrB,CAAC,CAAC;EACJ;;AApCWhB,UAAU;mBAAVA,UAAU;AAAA;AAAVA,UAAU;SAAVA,UAAU;EAAAsB,SAAVtB,UAAU;EAAAuB,YAFT;AAAM","names":["environment","env","HttpHeaders","catchError","retry","throwError","ApiService","constructor","http","headers","searchMovieByTitle","title","url","apis","apiUrl","get","pipe","handleError","getMovieById","id","getSearchHistory","error","errorMessage","ErrorEvent","message","status","console","log","factory","providedIn"],"sourceRoot":"","sources":["/Users/abrahaminyaka/sources/inyakaabraham/Interviews/ReelReflection.WebClient/src/app/services/api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { environment as env } from '../../environment/environment';\nimport { HttpClient, HttpEvent, HttpEventType, HttpHeaders, HttpRequest } from '@angular/common/http';\nimport { catchError, Observable, retry, throwError } from 'rxjs';\nimport { Movie } from '../models/movie';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n \n  constructor(private http:HttpClient) { }\n\n  public searchMovieByTitle(title:string): Observable<Movie>{\n    const url = `${env.apis.apiUrl}/GetMovieByTitle/${title}`;\n    return this.http.get<Movie>(url).pipe(retry(1), catchError(this.handleError));\n  }\n\n  public getMovieById(id:string): Observable<Movie>{\n    const url = `${env.apis.apiUrl}/GetMovieById/${id}`;\n    return this.http.get<Movie>(url).pipe(retry(1), catchError(this.handleError));\n  }\n\n  public getSearchHistory(): Observable<list>{\n    const url = `${env.apis.apiUrl}/SearchHistory`;\n    return this.http.get<Movie>(url).pipe(retry(1), catchError(this.handleError));\n  }\n\n  handleError(error: any) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    return throwError(() => {\n      console.log(errorMessage);\n      return errorMessage;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}